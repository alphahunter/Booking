package Assignment;

import Assignment.Login;
import java.lang.*;
import java.io.*;
import java.net.*;
import java.util.*;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Dragon
 */

public class Chat_Application extends javax.swing.JFrame {
    // TCP Components. 
    public static ServerSocket messanger = null;
    public static Socket msg = null;
    public static BufferedReader receive_msg = null;
    public static PrintWriter send_msg = null;
    
    // Total online users.
    public static int total_users = 0; 
    
    // Command used to update online user and when changed to 
    // LOGOUT(by Logout[JButton]) will cause a logout.
    public static String Command = "UPDATE_ONLINE_USERS";
    
    // The name of user to connect and send/receive messages.
    public static String ClientConnectTo = "";
    
    // The message entered in ChatLine[JTextField] which will be sent 
    // to connected user and appended in ChatBox[JTextArea].
    public static String toAppend = "";
    
    // Both are used to run thread till it is false.
    public static boolean CommandServer_thread = true;
    public static boolean MsgThreads_thread = true;
    
    // The names of Users that are online are stored in UsersOnline.
    public static Vector UsersOnline = new Vector ();
    // default port to connect to the online user which will be added
    // with online Users ID.
    public static int clientport = 1280;
    
    /**
     * Creates new form Chat_Application.
     */
    public Chat_Application() {
        initComponents();
        
        try {   
                Welcome.setText(Login.MyName);
                
                //Disables the Send[JButton] till connects with any online user.
                Send.setEnabled(false);
                
                // This thread creates server which is be used by online users to connect. 
                ClientsServer Connection = new ClientsServer();
                Connection.start();
                
                // This thread is created and started to get online users 
                // until logout button is pressed.
                CommandServer MyClientThread = new CommandServer();
                MyClientThread.start();
            
            }
            
          catch(Exception e) {
             System.out.println("Whoops! Chat_Application didn't work! because " + e);
          }
              
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        Clients = new javax.swing.JPanel();
        Connect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        online_users = new javax.swing.JTextArea();
        Logout = new javax.swing.JButton();
        Name = new javax.swing.JTextField();
        Welcome = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        message = new javax.swing.JPanel();
        ChatLine = new javax.swing.JTextField();
        Send = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ChatBox = new javax.swing.JTextArea();
        MsgConnection = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat Messanger");
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        Clients.setBackground(new java.awt.Color(255, 255, 255));

        Connect.setBackground(new java.awt.Color(51, 255, 204));
        Connect.setText("Connect");
        Connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter online users name to chat with");

        online_users.setEditable(false);
        online_users.setBackground(new java.awt.Color(51, 255, 204));
        online_users.setColumns(20);
        online_users.setForeground(new java.awt.Color(204, 0, 204));
        online_users.setLineWrap(true);
        online_users.setRows(5);
        online_users.setText("Users Name");
        jScrollPane2.setViewportView(online_users);

        Logout.setBackground(new java.awt.Color(51, 255, 204));
        Logout.setText("Logout");
        Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutActionPerformed(evt);
            }
        });

        Welcome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Welcome.setForeground(new java.awt.Color(51, 255, 51));
        Welcome.setText("USERNAME");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Welcome");

        javax.swing.GroupLayout ClientsLayout = new javax.swing.GroupLayout(Clients);
        Clients.setLayout(ClientsLayout);
        ClientsLayout.setHorizontalGroup(
            ClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ClientsLayout.createSequentialGroup()
                        .addGroup(ClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ClientsLayout.createSequentialGroup()
                                .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Connect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ClientsLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Logout)))
                        .addContainerGap())))
        );
        ClientsLayout.setVerticalGroup(
            ClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ClientsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Logout)
                    .addComponent(Welcome)
                    .addComponent(jLabel2))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ClientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Connect))
                .addGap(35, 35, 35))
        );

        message.setBackground(new java.awt.Color(255, 255, 255));

        Send.setBackground(new java.awt.Color(0, 204, 0));
        Send.setText("Send");
        Send.setBorder(new javax.swing.border.MatteBorder(null));
        Send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendActionPerformed(evt);
            }
        });

        ChatBox.setEditable(false);
        ChatBox.setColumns(20);
        ChatBox.setLineWrap(true);
        ChatBox.setRows(5);
        ChatBox.setToolTipText("");
        ChatBox.setWrapStyleWord(true);
        jScrollPane1.setViewportView(ChatBox);

        MsgConnection.setForeground(new java.awt.Color(51, 255, 51));

        javax.swing.GroupLayout messageLayout = new javax.swing.GroupLayout(message);
        message.setLayout(messageLayout);
        messageLayout.setHorizontalGroup(
            messageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messageLayout.createSequentialGroup()
                .addGroup(messageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(messageLayout.createSequentialGroup()
                        .addComponent(ChatLine)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Send, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(messageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(MsgConnection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, messageLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        messageLayout.setVerticalGroup(
            messageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, messageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MsgConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(messageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ChatLine, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(Send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Clients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Clients, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectActionPerformed
        // Disconnects with connected user if button is pressed.
        if("Disconnect".equals(Connect.getText())){
            // Sending to the connected client to tell that im disconnecting
            // @Disconnect@ is used since the user could write Disconnect in ChatLine[JTextField]
            // which then will lead to disconnect(which shouldnt be the case).
            send_msg.println("@Disconnect@");
            send_msg.flush();
            Disconnect();
        }
        // Connects with online user if Name[JTextField] is not empty and 
        // Name contains in UsersOnline .
        else if(!"".equals(Name.getText()) && UsersOnline.contains(Name.getText())){
            // Disables the Connect button so that user dosent try to connect to other users
            // while its waiting to be connected with the user.
            Connect.setEnabled(false);
            Connect.setText("Please Wait...");
            //Assigns the name of the user to connect to.
            ClientConnectTo = Name.getText();
            Name.setText("");
            Name.setEditable(false);
            ConnectToUsers();
        }
        // If the name entered Name[JTextField] is not a online user.
        else{
            Name.setText("User not online");
        }
    }//GEN-LAST:event_ConnectActionPerformed

    private void LogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutActionPerformed
        // Assigns LOGOUT to Command which then will be used
        // in MyClientThread to logout.
        Command = "LOGOUT";
    }//GEN-LAST:event_LogoutActionPerformed

    private void SendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendActionPerformed
        // Assigns the entered msg to toAppend so that it will be used to
        // send message and append the ChatBox without trying to getText again.
        toAppend = ChatLine.getText();
        ChatBox.append(Login.MyName + ": " + toAppend + "\n\n");
        send_msg.print(Login.MyName + ": " + toAppend + "\n");
        send_msg.flush();
        ChatLine.setText("");

    }//GEN-LAST:event_SendActionPerformed
    /**
     * Disconnects with the connected user and enables
     * the Name[JTextField] so that client can again connect to 
     * online users and disables Send[JButton] so that users don't 
     * try to send message when they are not connected and assigns false to
     * MsgThreads_thread so that that thread can finish.
     */
    public void Disconnect(){
        try{
            Connect.setText("Connect");
            MsgConnection.setText("Disconnected");
            Name.setEditable(true);
            Send.setEnabled(false);

            MsgThreads_thread = false;
            receive_msg.close();
            receive_msg = null;
            send_msg.close(); 
            msg.close();
        }
        catch(Exception e){
            System.out.println("Whoops! Disconnect didn't work! because" + e);
        }
    }
    /**
     * Updates the online users and inserts all the users in UsersOnline[Vector]
     * to be used when connecting to users by using there Names index in 
     * UsersOnline[Vector] and added with 1280 to give there port.
     */
    public void Update_users(){
        String username;
        try{
            Login.send.println("UPDATE_ONLINE_USERS");
            Login.send.flush();
            UsersOnline.removeAllElements();
            total_users = Integer.parseInt(Login.receive.readLine());
            online_users.setText("Users Online\n--------------------\n");
            for(int i=0;i<total_users;i++){
                username = Login.receive.readLine();
                UsersOnline.addElement(username);
                    if(!username.equals(Login.MyName)){
                        online_users.append(username +"\n");
                    }
            }
        }
        catch(IOException | NumberFormatException e) {
            System.out.print("Whoops! UPDATE_ONLINE_USERS didn't work! becuase\n" + e);
        }
    }
    /**
     *  Send data to server to let it know that the client is disconnecting
     *  after that closes connections and goes back to Login. 
     */
    public void LogMeOut(){
        try{
            Login.send.println("LOGOUT");
            Login.send.flush();

            Login.socket.close();
            Login.send.close();
            Login.receive.close();

            Login L = new Login();
            L.setVisible(true);
            setVisible(false);
        }
        catch(Exception e){
            System.out.println("Logout didnt work properly because " + e);
        }
    }
    /**
     * Creates Server which will be used to connect with users.
     */
    public void CreateServer(){
        try{
            clientport = clientport + Login.MyClientID;
            messanger = new ServerSocket(clientport);
            while(!"LOGOUT".equals(Command)){
                    msg = messanger.accept();
                    System.out.println("Server has connected!");
                    Send.setEnabled(true);
                    Connect.setText("Disconnect");
                    Name.setEditable(false);
                    MsgConnection.setText("Connected");
                    receive_msg = new BufferedReader(new InputStreamReader(msg.getInputStream())); 
                    send_msg = new PrintWriter(new OutputStreamWriter(msg.getOutputStream()));
                    MsgThreads msgThread = new MsgThreads();
                    msgThread.start();
                
            }
            System.out.println("All connection closed");
        }
        catch(Exception e){
            System.out.println("CreateServer didnt work" + e);
        }

    }
    /**
     * Connects to the the given user in Name[JTextField].
     * Sets the Connect[JButton] to Disconnect since users are connected
     * and so that users know which button to press to disconnect from connected user.
     * Enables the Send[JButton] to be able to send message with connected users.
     */
    public void ConnectToUsers(){
        try{ 
            // Adds 1280 to ClientConnectTo's ID add 1 since index starts from 0 but
            // Clients(client_num) starts from 1 which results in the clients port.
            clientport = 1280 + UsersOnline.indexOf(ClientConnectTo) + 1;
            
            msg = new Socket("localhost", clientport);
            Connect.setText("Disconnect");
            Connect.setEnabled(true);
            Send.setEnabled(true);
            MsgConnection.setText("Connected");
            receive_msg = new BufferedReader(new InputStreamReader(msg.getInputStream())); 
            send_msg = new PrintWriter(new OutputStreamWriter(msg.getOutputStream()));
            
            // This thread is created and started to receive messages 
            // until MsgThreads_thread is false which means when 1 of them disconnects.
            MsgThreads msgThread = new MsgThreads();
            msgThread.start();
        }

        catch(Exception e) {
           System.out.print("Whoops! ConnectToClients didnt work because\n" + e);
        }
    }
    /**
     * This thread creates server which is be used by online users to connect to. 
     */
    class ClientsServer extends Thread 
    {
        public ClientsServer() 
            { 
                super(); 
            }

        @Override
        public void run() 
        {   
            CreateServer();

        }
    }
    /**
     * To get online users until Logout[JButton] is pressed.
     */
    class CommandServer extends Thread 
    {
        public CommandServer() 
            { 
                super(); 
            }

        @Override
        public void run() 
        {   
            while(CommandServer_thread){
                switch (Command) {
                    case "LOGOUT":
                        LogMeOut();
                        CommandServer_thread = false;
                        break;
                    case "UPDATE_ONLINE_USERS":
                        Update_users();
                        try{Thread.sleep(2000);}
                        catch(InterruptedException e){
                            System.out.println(e);
                        }
                        break;
                    default:
                        break;          
                }
            }
        }
    }   
    /**
     * To receive messages until MsgThreads_thread is false which means when 1 of them disconnects.
     */
    class MsgThreads extends Thread 
    { 
        Socket mySocket;
        public MsgThreads() 
        { 
            super(); 
        }

        @Override
        public void run() 
        {
            String messages = null;
            MsgThreads_thread = true;
            while(MsgThreads_thread)
            {
                    try { // Poll every ~10 ms
                        Thread.sleep(10);
                    }
                    catch (InterruptedException e) {}
                    
                    try{
                        if ((receive_msg != null) && (receive_msg.ready())) {
                            messages = receive_msg.readLine();
                            if(!"@Disconnect@".equals(messages)){
                                if ((messages != null) &&  (messages.length() != 0)) {
                                    ChatBox.append(messages + "\n\n");
                                }
                            }
                            else{
                                Disconnect();
                            }
                        }
                    }
                    
                    catch(IOException ioe){
                        System.out.println("MsgThreads didnt work properly!" + ioe);
                    }
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new Chat_Application().setVisible(true);
            }
        });
        
    }
    
    



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea ChatBox;
    private javax.swing.JTextField ChatLine;
    private javax.swing.JPanel Clients;
    private javax.swing.JButton Connect;
    private javax.swing.JButton Logout;
    private javax.swing.JLabel MsgConnection;
    private javax.swing.JTextField Name;
    private javax.swing.JButton Send;
    private javax.swing.JLabel Welcome;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel message;
    private javax.swing.JTextArea online_users;
    // End of variables declaration//GEN-END:variables
}
